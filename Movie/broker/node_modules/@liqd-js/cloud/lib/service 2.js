'use strict';

const ServiceHandle = require('./service/handle.js');
//const ServiceBroker = require('./service/broker.js');

const { NOOP } = require('./helpers.js');
const { Server } = require('@liqd-js/websocket');
const Client_JSONRPC = require('@liqd-js/client-jsonrpc');

const Services = new Map();
const Brokers = new Set();

ServiceHandle.init( Services, Brokers );

module.exports = class Service
{
    #id;

    static init( brokers )
    {
        for( let broker of brokers )
        {
            broker = new Client_JSONRPC( broker );

            broker.on( 'call', async( id, method, params ) => 
            {
                if( method === 'service:call' )
                {
                    let [ serviceID, fn ] = params.splice( 0, 2 ), service = Services.get( serviceID );

                    if( service )
                    {
                        try
                        {
                            broker.result( id, await service[fn]( ...params ));
                        }
                        catch( err ){ broker.error( id, err )}
                    }
                    else{ broker.error( id, { code: 404, message: 'Service "' + serviceID + '" not found' })}
                }
                else if( method === 'service:discover' )
                {
                    broker.result( id, Services.has( params[0] ));
                }
            });

            Brokers.add( broker );
        }
    }

    constructor( id )
    {
        this.#id = id || this.constructor.id;

        if( !this.#id )
        {
            throw new Error( 'Missing "id" in Service class "' + this.constructor.name + '"' );
        }

        Services.set( this.#id, this );
    }

    service( id )
    {
        return ServiceHandle.create( this.#id, id );
    }
}